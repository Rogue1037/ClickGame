{"version":3,"sources":["components/Navbar/index.js","components/Header/index.js","components/Item/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","messageClass","message","score","topscore","Header","Item","_ref","name","image","onClick","src","alt","App","state","topScore","maxScore","ships","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","correctChoice","_this","setState","wrongChoice","map","uc","isClicked","Object","objectSpread","winReset","currectShips","randomizeShips","resetNeeded","renderShips","ship","components_Item","key","id","components_Header","components_Navbar","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac3d3d2e.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst Navbar = (props) => (\n  <nav className = \"navbar-brand\">\n    <ul>\n      <li className = {props.messageClass}>{props.message}</li>\n      <li>Score: {props.score} | Top Score: {props.topscore}</li>\n    </ul>\n  </nav>\n);\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Header = () => (\n  <header className = \"jumbotron\">\n    <h1>One Ship, One Choice</h1>\n    <h3>Try to avoid clicking the same Ship more than once after they shuffle</h3>\n  </header>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./Item.css\";\n\nconst Item = ({ name, image, onClick}) =>\n  <img\n    className = \"click-item img-fluid\"\n    src = {image}\n    alt = {name}\n    name = {name}\n    onClick = { () => onClick(name) }\n  />;\n \n  export default Item;","import React, { Component } from 'react';\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Item from \"./components/Item\";\nimport ships from \"./ships.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n   state = {\n    score: 0,\n    topScore: 0,\n    maxScore: 8,\n    message: \"Pick your first ship to begin!\",\n    messageClass:\"\",\n    ships: ships\n  };\n\n  shuffle = (array) => {\n    \n    let currentIndex = array.length;\n    let temporaryValue;\n    let randomIndex;\n\n    while (0 !== currentIndex) {\n\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n\n  }\n\n  correctChoice = () => {\n\n    if (this.state.score + 1 > this.state.topScore) {\n      this.setState({topScore: this.state.topScore + 1})\n    }\n    if (this.state.score + 1 === this.state.maxScore) {\n      this.setState({score: this.state.score + 1, message: \"You know you're ships!\", messageClass: \"Correct\"})\n    } else {\n      this.setState({score: this.state.score + 1, message: \"Pick your next ship, correct!!\", messageClass: \"Correct\"})\n    }\n\n  } // close correctChoice\n\n  wrongChoice = () => {\n\n    this.setState({score: 0, message: \"you already picked that ship!\"})\n    const updatedShips = this.state.ships.map(uc => uc.isClicked === (true) ? { ...uc, isClicked: false } : uc)\n    return updatedShips\n\n  }\n\n  winReset = (currectShips) => {\n\n    if (this.state.score + 1 === this.state.maxScore) {\n      this.setState({score: 0, topScore: 0})\n      const updatedShips = currectShips.map(uc => (true) ? { ...uc, isClicked: false} : uc)\n        return updatedShips\n    } else {\n      return currectShips\n    }\n\n  } // close winReset\n\n \nrandomizeShips = (name) => {\n\nvar resetNeeded = false;\n  const ships = this.state.ships.map(uc => {\n    if(uc.name === name) {\n      if (uc.isClicked === false) {\n        this.correctChoice()\n          return { ...uc, isClicked: true}\n      } else {\n        resetNeeded = true\n        return { ...uc, isClicked: false}\n      }\n    }\n    return uc\n  })\n  if (resetNeeded) {\n  this.setState({\n  ships: this.shuffle(this.wrongChoice()),\n  messageClass:\"incorrect\"\n  })\n      \n} else {\n  this.setState({ ships: this.shuffle(this.winReset(ships)) })\n}\n    \n} //close randomizeShips\n\n  renderShips = () => {\n\n  return this.state.ships.map((ship) =>\n    <Item \n      image={ship.image} \n      name={ship.name} \n      key={ship.id} \n      onClick={this.randomizeShips} \n      />\n  );\n}\n\nrender() {\nreturn (\n  <div className=\"App\">\n  <Header />\n  <Navbar\n    score={this.state.score}\n    topscore={this.state.topScore}\n    message={this.state.message}\n    messageClass={this.state.messageClass}\n    />\n\n        \n  <div className=\"content\">\n    {this.renderShips()}\n      </div>\n    </div>\n\n  );\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}